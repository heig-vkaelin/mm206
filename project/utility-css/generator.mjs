'use strict';

import fs from 'fs';
import config from './config.mjs';

function getVariantsKeys(rule, variant, size, key) {
  let data = '';
  let variantSuffix = variant ? `-${config.variants[variant]}` : '';

  if (variant === '' || config.variants[variant].length === 1) {
    data += `${key}${variantSuffix}: ${config.theme[config.syntax[rule].sizes][size]};`;
  } else {
    data += '\n';
    for (let v of config.variants[variant]) {
      data += `\t${key}-${v}: ${config.theme[config.syntax[rule].sizes][size]};\n`;
    }
  }
  return data;
}

function getSizes(rule, variant) {
  let data = '';
  const sizes = config.theme[config.syntax[rule].sizes];
  for (let size in sizes) {
    if (config.syntax[rule].keys.length === 1) {
      // SINGLE KEY
      data += `.${rule}${variant}-${size.replaceAll(/[.]/g, '\\.')} { ${getVariantsKeys(
        rule,
        variant,
        size,
        config.syntax[rule].keys[0],
      )}}\r`;
    } else {
      // MULTIPLE KEYS
      data += `.${rule}${variant}-${size.replaceAll(/[.]/g, '\\.')} {\n`;
      for (let key in config.syntax[rule].keys) {
        data += `\t${getVariantsKeys(rule, variant, size, key)}`;
      }
      data += `}\n`;
    }
  }
  return data;
}

function generateUtilityCss() {
  let cssData =
    '/***** Utility CSS *****\n' +
    '*** This file is generated by the generator.mjs script.\n' +
    '*** Do not edit this file directly.\n' +
    '*** Instead, edit the config.mjs file.\n' +
    '*** Any changes made to this file will be overwritten.\n' +
    '*** Author: Francesco Monti & Valentin Kaelin\n' +
    '*/\n\n';

  for (let rule in config.syntax) {
    cssData += `/** ${config.syntax[rule].keys[0].toUpperCase()} **/\n`;
    if (config.syntax[rule].variants) {
      cssData += getSizes(rule, '');
      for (let variant of config.syntax[rule].variants) {
        if (variant.match(/^all-.+/)) {
          for (let v of config.variants[variant]) {
            cssData += getSizes(rule, v);
          }
        } else {
          cssData += getSizes(rule, variant);
        }
      }
    } else {
      cssData += getSizes(rule, '');
    }
    cssData += '\n\n';
  }

  fs.writeFile('./utility.css', cssData, (err) => {
    if (err) throw err;
    console.log('The file has been saved!');
  });
}

generateUtilityCss();
